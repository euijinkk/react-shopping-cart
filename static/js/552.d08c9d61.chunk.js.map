{"version":3,"file":"static/js/552.d08c9d61.chunk.js","mappings":"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","sources":["apis/index.ts","components/common/CroppedImage.tsx","components/common/RequestFail.tsx","hooks/useAppDispatch.ts","hooks/useCartRequest.ts","hooks/useThunkFetch.ts","redux/cartList/thunk.ts"],"sourcesContent":["import axios from 'axios';\n\nconst LOCAL_BASE_URL = process.env.REACT_APP_LOCAL_BASE_URL;\nconst PRODUCT_BASE_URL = process.env.REACT_APP_PRODUCT_BASE_URL;\n\nexport const BASE_URL = process.env.NODE_ENV === 'production' ? PRODUCT_BASE_URL : LOCAL_BASE_URL;\n\nexport const client = axios.create({\n  baseURL: BASE_URL,\n});\n","import defaultImage from 'assets/defaultImage.jpeg';\nimport { SyntheticEvent } from 'react';\nimport styled from 'styled-components';\n\ninterface CroppedImageProps {\n  src: string;\n  width: string;\n  height: string;\n  alt: string;\n}\n\nconst CroppedImage = ({ src, width, height, alt }: CroppedImageProps) => {\n  const handleErrorImage = (e: SyntheticEvent<HTMLImageElement, Event>) => {\n    if (!(e.target instanceof HTMLImageElement)) return;\n    e.target.src = defaultImage;\n  };\n\n  return (\n    <StyledImageWrapper width={width} height={height}>\n      <StyledImage src={src} alt={alt} onError={handleErrorImage}></StyledImage>\n    </StyledImageWrapper>\n  );\n};\n\nexport default CroppedImage;\n\nconst StyledImageWrapper = styled.div<Pick<CroppedImageProps, 'width' | 'height'>>`\n  position: relative;\n  width: ${({ width }) => width};\n  height: ${({ height }) => height};\n  overflow: hidden;\n`;\n\nconst StyledImage = styled.img`\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translate(50, 50);\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  margin: auto;\n`;\n","const RequestFail = () => {\n  return <div>에러입니다.</div>;\n};\n\nexport default RequestFail;\n","import { useDispatch } from 'react-redux';\nimport type { Action } from 'redux';\nimport { RootState } from 'redux/rootReducer';\nimport type { ThunkDispatch } from 'redux-thunk';\n\ntype AppDispatch<T extends Action> = ThunkDispatch<RootState, null, T>;\n\nexport const useAppDispatch = <T extends Action>() => useDispatch<AppDispatch<T>>();\n","import { CartListAction } from 'redux/cartList/action';\nimport {\n  deleteAllCartItemRequest,\n  deleteCartItemRequest,\n  patchAllCartSelectedRequest,\n  patchCartSelectedRequest,\n  postCartItemRequest,\n  putCartItemRequest,\n} from 'redux/cartList/thunk';\nimport { CartItem } from 'types/domain';\n\nimport { useAppDispatch } from './useAppDispatch';\n\nconst useCartRequest = (cartList: CartItem[]) => {\n  const dispatch = useAppDispatch<CartListAction>();\n\n  const postCartItemQuantity =\n    (id: number | string) =>\n    (diff = 1) => {\n      dispatch(postCartItemRequest({ id: Number(id), quantity: diff, isSelected: true }));\n    };\n\n  const updateCartItemQuantity =\n    (id: number | string) =>\n    (diff = 1) => {\n      const targetId = typeof id === 'number' ? id : Number(id);\n      const targetItem = cartList.find(cartItem => cartItem.id === targetId);\n\n      dispatch(putCartItemRequest({ ...targetItem, quantity: targetItem.quantity + diff }));\n    };\n\n  const selectCartItem = (id: number | string) => () => {\n    dispatch(patchCartSelectedRequest(Number(id)));\n  };\n\n  const selectAllCartItem = (isAllSelected: boolean) => {\n    dispatch(patchAllCartSelectedRequest(isAllSelected));\n  };\n\n  const deleteCartItem = (id: number | string) => () => {\n    dispatch(deleteCartItemRequest(Number(id)));\n  };\n\n  const deleteAllCartItem = () => {\n    dispatch(deleteAllCartItemRequest());\n  };\n\n  return {\n    postCartItemQuantity,\n    updateCartItemQuantity,\n    selectCartItem,\n    selectAllCartItem,\n    deleteCartItem,\n    deleteAllCartItem,\n  };\n};\n\nexport default useCartRequest;\n","import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport type { Action, Dispatch } from 'redux';\nimport { RootState } from 'redux/rootReducer';\n\nimport { useAppDispatch } from './useAppDispatch';\n\ntype Selector<T> = (state: RootState) => T;\ntype ThunkActionCreator<T extends Action> = () => (dispatch: Dispatch<T>) => void;\n\nconst useThunkFetch = <StateType, ActionType extends Action>(\n  selector: Selector<StateType>,\n  thunkActionCreator: ThunkActionCreator<ActionType>\n): StateType => {\n  const dispatch = useAppDispatch<ActionType>();\n  const state = useSelector(selector);\n\n  useEffect(() => {\n    dispatch(thunkActionCreator());\n  }, []);\n\n  return state;\n};\n\nexport default useThunkFetch;\n","import { BASE_URL } from 'apis';\nimport axios from 'axios';\nimport type { Dispatch } from 'redux';\nimport { CartListAction, cartListAction } from 'redux/cartList/action';\nimport { RootState } from 'redux/rootReducer';\nimport { CartItem } from 'types/domain';\n\nexport const getCartListRequest = () => async (dispatch: Dispatch<CartListAction>) => {\n  dispatch(cartListAction.getCartListStart());\n  try {\n    const response = await axios.get(`${BASE_URL}/cartList`);\n\n    dispatch(cartListAction.getCartListSuccess(response.data));\n  } catch (e) {\n    dispatch(cartListAction.getCartListFailure(e.message));\n  }\n};\n\nexport const putCartItemRequest =\n  (cartItem: CartItem) => async (dispatch: Dispatch<CartListAction>) => {\n    dispatch(cartListAction.putCartItemStart());\n    try {\n      const response = await axios.put(`${BASE_URL}/cartList/${cartItem.id}`, cartItem);\n\n      dispatch(cartListAction.putCartItemSuccess(response.data));\n    } catch (e) {\n      dispatch(cartListAction.putCartItemFailure(e.message));\n    }\n  };\n\nexport const postCartItemRequest =\n  (cartItem: CartItem) => async (dispatch: Dispatch<CartListAction>) => {\n    dispatch(cartListAction.postCartItemStart());\n    try {\n      const response = await axios.post(`${BASE_URL}/cartList`, cartItem);\n\n      dispatch(cartListAction.postCartItemSuccess(response.data));\n    } catch (e) {\n      dispatch(cartListAction.postCartItemFailure(e.message));\n    }\n  };\n\nexport const patchCartSelectedRequest =\n  (id: number) => async (dispatch: Dispatch<CartListAction>, getState: () => RootState) => {\n    dispatch(cartListAction.patchCartSelectedStart());\n    try {\n      const { data: cartList } = getState().cartListReducer;\n      const isSelected = cartList.find(item => item.id === id).isSelected;\n      const response = await axios.patch(`${BASE_URL}/cartList/${id}`, { isSelected: !isSelected });\n\n      dispatch(cartListAction.patchCartSelectedSuccess(response.data));\n    } catch (e) {\n      dispatch(cartListAction.patchCartSelectedFailure(e.message));\n    }\n  };\n\nexport const patchAllCartSelectedRequest =\n  (isAllSelected: boolean) =>\n  async (dispatch: Dispatch<CartListAction>, getState: () => RootState) => {\n    dispatch(cartListAction.patchAllCartSelectedStart());\n    try {\n      const { data: cartList } = getState().cartListReducer;\n\n      cartList.forEach(\n        async item =>\n          await axios.patch(`${BASE_URL}/cartList/${item.id}`, { isSelected: !isAllSelected })\n      );\n\n      dispatch(cartListAction.patchAllCartSelectedSuccess(!isAllSelected));\n    } catch (e) {\n      dispatch(cartListAction.patchAllCartSelectedFailure(e.message));\n    }\n  };\n\nexport const deleteCartItemRequest = (id: number) => async (dispatch: Dispatch<CartListAction>) => {\n  dispatch(cartListAction.deleteCartItemStart());\n  try {\n    await axios.delete(`${BASE_URL}/cartList/${id}`);\n\n    dispatch(cartListAction.deleteCartItemSuccess(id));\n  } catch (e) {\n    dispatch(cartListAction.deleteCartItemFailure(e.message));\n  }\n};\n\nexport const deleteAllCartItemRequest =\n  () => async (dispatch: Dispatch<CartListAction>, getState: () => RootState) => {\n    dispatch(cartListAction.deleteAllCartItemStart());\n    try {\n      const { data: cartList } = getState().cartListReducer;\n\n      cartList.forEach(async item => await axios.delete(`${BASE_URL}/cartList/${item.id}`));\n\n      dispatch(cartListAction.deleteAllCartItemSuccess());\n    } catch (e) {\n      dispatch(cartListAction.deleteAllCartItemFailure(e.message));\n    }\n  };\n"],"names":["BASE_URL","process","client","axios","baseURL","src","width","height","alt","StyledImageWrapper","StyledImage","onError","e","target","HTMLImageElement","styled","useAppDispatch","useDispatch","cartList","dispatch","postCartItemQuantity","id","diff","postCartItemRequest","Number","quantity","isSelected","updateCartItemQuantity","targetId","targetItem","find","cartItem","putCartItemRequest","selectCartItem","patchCartSelectedRequest","selectAllCartItem","isAllSelected","patchAllCartSelectedRequest","deleteCartItem","deleteCartItemRequest","deleteAllCartItem","deleteAllCartItemRequest","selector","thunkActionCreator","state","useSelector","useEffect","getCartListRequest","cartListAction","response","data","message","getState","cartListReducer","item","forEach"],"sourceRoot":""}